/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.motoconnect;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author PC
 */
public class Tela_Lista_Encomendas extends javax.swing.JFrame {
    
    
    

    /**
     * Creates new form Tela_Lista_Encomendas
     */
    public Tela_Lista_Encomendas() {
        initComponents();
        
        
        
    }
    private void pesquisarTabela(int idTabela) {
    // URL de conexão com o banco de dados
    String url = "jdbc:mysql://localhost:3306/crud";
    
    // Credenciais de acesso ao banco de dados
    String usuario = "root";
    String senha = "";
    
    // Consultas SQL para buscar informações do cliente, destinatário e cálculo de frete
    String sqlEntregador = "SELECT * FROM entregador WHERE id_entregador = ?";
    String sqlStatus = "SELECT * FROM statuss WHERE id_statuss = ?";
    String sqlCalculoFrete = "SELECT * FROM calculo_frete WHERE numero_pedido = ?";
    
    try (Connection con = DriverManager.getConnection(url, usuario, senha);
         PreparedStatement pstEntregador = con.prepareStatement(sqlEntregador);
         PreparedStatement pstStatus = con.prepareStatement(sqlStatus);
         PreparedStatement pstCalculoFrete = con.prepareStatement(sqlCalculoFrete)) {
        
        // Limpa os campos de texto
        limparCampos();

        // Consulta na tabela Entregador
        pstEntregador.setInt(1, idTabela);
        try (ResultSet rsEntregador = pstEntregador.executeQuery()) {
            if (rsEntregador.next()) {
                // Preenche os campos de texto com as informações do Entregador
                JTFentregador10.setText(
                    rsEntregador.getString("nome") + ", " +
                    rsEntregador.getString("sobrenome")
                );
            } else {
                // Mostra uma mensagem de erro se o Entregador não for encontrado
                JOptionPane.showMessageDialog(this, "Entregador não encontrado com o ID: " + idTabela);
                return;
            }
        }
        
        // Consulta na tabela Status
        pstStatus.setInt(1, idTabela);
        try (ResultSet rsStatus = pstStatus.executeQuery()) {
            if (rsStatus.next()) {
                // Preenche os campos de texto com as informações do Status
                JTFdata10.setText(rsStatus.getString("data_entrega"));
                JTFstatus10.setText(rsStatus.getString("statuss"));
            } else {
                // Mostra uma mensagem de erro se o Status não for encontrado
                JOptionPane.showMessageDialog(this, "Status não encontrado com o ID: " + idTabela);
                return;
            }
        }
        
        // Consulta na tabela calculo_frete
        pstCalculoFrete.setInt(1, idTabela);
        try (ResultSet rsCalculoFrete = pstCalculoFrete.executeQuery()) {
            if (rsCalculoFrete.next()) {
                // Preenche os campos de texto com as informações do cálculo de frete
                JTFcidadeorigem10.setText(rsCalculoFrete.getString("cidade_origem"));
                JTFcidadedestino10.setText(rsCalculoFrete.getString("cidade_destino"));
            } else {
                // Mostra uma mensagem de erro se o cálculo de frete não for encontrado
                JOptionPane.showMessageDialog(this, "Cálculo de frete não encontrado com o ID: " + idTabela);
            }
        }
        
    } catch (SQLException e) {
        // Mostra uma mensagem de erro se ocorrer um problema ao acessar o banco de dados
        System.out.println("Erro ao buscar informações: " + e.getMessage());
        JOptionPane.showMessageDialog(this, "Erro ao buscar informações: " + e.getMessage());
    }
    }

    private void limparCampos() {
    JTFentregador10.setText("");
    JTFdata10.setText("");
    JTFstatus10.setText("");
    JTFcidadeorigem10.setText("");
    JTFcidadedestino10.setText("");
}
    
    /**
     * Método para obter a conexão com o banco de dados MySQL.
     * 
     * @return A conexão com o banco de dados.
     */
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JPNfundo10 = new javax.swing.JPanel();
        JPNlista10 = new javax.swing.JPanel();
        JLBlista10 = new javax.swing.JLabel();
        JSPtabela10 = new javax.swing.JScrollPane();
        JTBtabela10 = new javax.swing.JTable();
        JTBatualizar10 = new javax.swing.JButton();
        JTBvoltar10 = new javax.swing.JButton();
        JPNtabelaencomenda10 = new javax.swing.JPanel();
        JLBtabelaencomenda10 = new javax.swing.JLabel();
        JLBmotoconnect10 = new javax.swing.JLabel();
        JTFnumero10 = new javax.swing.JTextField();
        JTFdata10 = new javax.swing.JTextField();
        JTFstatus10 = new javax.swing.JTextField();
        JLBnumero10 = new javax.swing.JLabel();
        JLBdata10 = new javax.swing.JLabel();
        JLBstatus10 = new javax.swing.JLabel();
        JTBexcluir10 = new javax.swing.JButton();
        JTFcidadedestino10 = new javax.swing.JTextField();
        JTFentregador10 = new javax.swing.JTextField();
        JTFcidadeorigem10 = new javax.swing.JTextField();
        JLBcidadeorigem10 = new javax.swing.JLabel();
        JLBentregador10 = new javax.swing.JLabel();
        JLBcidadedestino10 = new javax.swing.JLabel();
        JBTeditar10 = new javax.swing.JButton();
        JBTpesquisar10 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        JPNfundo10.setBackground(new java.awt.Color(0, 0, 204));
        JPNfundo10.setPreferredSize(new java.awt.Dimension(1000, 600));

        JPNlista10.setBackground(new java.awt.Color(0, 102, 255));
        JPNlista10.setPreferredSize(new java.awt.Dimension(844, 30));

        JLBlista10.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        JLBlista10.setForeground(new java.awt.Color(255, 255, 255));
        JLBlista10.setText("Lista de encomendas");

        javax.swing.GroupLayout JPNlista10Layout = new javax.swing.GroupLayout(JPNlista10);
        JPNlista10.setLayout(JPNlista10Layout);
        JPNlista10Layout.setHorizontalGroup(
            JPNlista10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPNlista10Layout.createSequentialGroup()
                .addGap(267, 267, 267)
                .addComponent(JLBlista10)
                .addContainerGap(259, Short.MAX_VALUE))
        );
        JPNlista10Layout.setVerticalGroup(
            JPNlista10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPNlista10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JLBlista10, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        JTBtabela10.setBackground(new java.awt.Color(255, 51, 51));
        JTBtabela10.setForeground(new java.awt.Color(255, 255, 255));
        JTBtabela10.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Numero da encomenda", "Nome completo", "Cidade origem", "Cidade destino", "Data e hora", "Status"
            }
        ));
        JTBtabela10.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                JTBtabela10AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        JSPtabela10.setViewportView(JTBtabela10);

        JTBatualizar10.setBackground(new java.awt.Color(255, 51, 51));
        JTBatualizar10.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        JTBatualizar10.setForeground(new java.awt.Color(255, 255, 255));
        JTBatualizar10.setText("ATUALIZAR ");
        JTBatualizar10.setMaximumSize(new java.awt.Dimension(106, 25));
        JTBatualizar10.setPreferredSize(new java.awt.Dimension(106, 25));
        JTBatualizar10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTBatualizar10ActionPerformed(evt);
            }
        });

        JTBvoltar10.setBackground(new java.awt.Color(255, 51, 51));
        JTBvoltar10.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        JTBvoltar10.setForeground(new java.awt.Color(255, 255, 255));
        JTBvoltar10.setText("VOLTAR");
        JTBvoltar10.setMaximumSize(new java.awt.Dimension(106, 25));
        JTBvoltar10.setPreferredSize(new java.awt.Dimension(106, 25));
        JTBvoltar10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTBvoltar10ActionPerformed(evt);
            }
        });

        JPNtabelaencomenda10.setBackground(new java.awt.Color(255, 0, 51));

        JLBtabelaencomenda10.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        JLBtabelaencomenda10.setForeground(new java.awt.Color(255, 255, 255));
        JLBtabelaencomenda10.setText("Tabela encomendas");

        javax.swing.GroupLayout JPNtabelaencomenda10Layout = new javax.swing.GroupLayout(JPNtabelaencomenda10);
        JPNtabelaencomenda10.setLayout(JPNtabelaencomenda10Layout);
        JPNtabelaencomenda10Layout.setHorizontalGroup(
            JPNtabelaencomenda10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPNtabelaencomenda10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JLBtabelaencomenda10, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        JPNtabelaencomenda10Layout.setVerticalGroup(
            JPNtabelaencomenda10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPNtabelaencomenda10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JLBtabelaencomenda10)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        JLBmotoconnect10.setIcon(new javax.swing.ImageIcon("C:\\Users\\PC\\Desktop\\MotoConnect_Projeto\\Giampaolo_Projeto_Technight\\MotoConnect\\src\\main\\java\\imagem_login\\motoqueiro.png")); // NOI18N

        JTFnumero10.setBackground(new java.awt.Color(204, 204, 204));

        JTFdata10.setBackground(new java.awt.Color(204, 204, 204));

        JTFstatus10.setBackground(new java.awt.Color(204, 204, 204));

        JLBnumero10.setForeground(new java.awt.Color(255, 255, 255));
        JLBnumero10.setText("Numero da encomenda:");

        JLBdata10.setForeground(new java.awt.Color(255, 255, 255));
        JLBdata10.setText("Data e hora:");

        JLBstatus10.setForeground(new java.awt.Color(255, 255, 255));
        JLBstatus10.setText("Status:");

        JTBexcluir10.setBackground(new java.awt.Color(255, 51, 51));
        JTBexcluir10.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        JTBexcluir10.setForeground(new java.awt.Color(255, 255, 255));
        JTBexcluir10.setText("EXCLUIR");
        JTBexcluir10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTBexcluir10ActionPerformed(evt);
            }
        });

        JTFcidadedestino10.setBackground(new java.awt.Color(204, 204, 204));

        JTFentregador10.setBackground(new java.awt.Color(204, 204, 204));

        JTFcidadeorigem10.setBackground(new java.awt.Color(204, 204, 204));

        JLBcidadeorigem10.setForeground(new java.awt.Color(255, 255, 255));
        JLBcidadeorigem10.setText("Cidade de origem:");

        JLBentregador10.setForeground(new java.awt.Color(255, 255, 255));
        JLBentregador10.setText("Entregador:");

        JLBcidadedestino10.setForeground(new java.awt.Color(255, 255, 255));
        JLBcidadedestino10.setText("Cidade de destino:");

        JBTeditar10.setBackground(new java.awt.Color(255, 51, 51));
        JBTeditar10.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        JBTeditar10.setForeground(new java.awt.Color(255, 255, 255));
        JBTeditar10.setText("EDITAR");
        JBTeditar10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBTeditar10ActionPerformed(evt);
            }
        });

        JBTpesquisar10.setBackground(new java.awt.Color(255, 51, 51));
        JBTpesquisar10.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        JBTpesquisar10.setForeground(new java.awt.Color(255, 255, 255));
        JBTpesquisar10.setText("PESQUISAR");
        JBTpesquisar10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBTpesquisar10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JPNfundo10Layout = new javax.swing.GroupLayout(JPNfundo10);
        JPNfundo10.setLayout(JPNfundo10Layout);
        JPNfundo10Layout.setHorizontalGroup(
            JPNfundo10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPNfundo10Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(JPNfundo10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPNfundo10Layout.createSequentialGroup()
                        .addGroup(JPNfundo10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(JPNfundo10Layout.createSequentialGroup()
                                .addComponent(JTBatualizar10, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(JTBexcluir10)
                                .addGap(18, 18, 18)
                                .addComponent(JBTeditar10)
                                .addGap(18, 18, 18)
                                .addComponent(JBTpesquisar10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(JTBvoltar10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(JPNtabelaencomenda10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(JPNfundo10Layout.createSequentialGroup()
                                .addComponent(JLBmotoconnect10, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(JPNlista10, javax.swing.GroupLayout.PREFERRED_SIZE, 651, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(JSPtabela10, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(173, 173, 173))
                    .addGroup(JPNfundo10Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(JPNfundo10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(JLBnumero10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(JTFnumero10))
                        .addGap(33, 33, 33)
                        .addGroup(JPNfundo10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JTFentregador10, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JLBentregador10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(JPNfundo10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JTFcidadeorigem10, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JLBcidadeorigem10))
                        .addGap(26, 26, 26)
                        .addGroup(JPNfundo10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JLBcidadedestino10)
                            .addComponent(JTFcidadedestino10, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(JPNfundo10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JLBdata10)
                            .addComponent(JTFdata10, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addGroup(JPNfundo10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JTFstatus10, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JLBstatus10))
                        .addGap(192, 192, 192))))
        );
        JPNfundo10Layout.setVerticalGroup(
            JPNfundo10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPNfundo10Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(JPNfundo10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JPNlista10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JLBmotoconnect10, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(JPNtabelaencomenda10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(JSPtabela10, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(JPNfundo10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLBnumero10)
                    .addComponent(JLBdata10)
                    .addComponent(JLBstatus10)
                    .addComponent(JLBentregador10)
                    .addComponent(JLBcidadedestino10)
                    .addComponent(JLBcidadeorigem10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JPNfundo10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JTFnumero10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JTFdata10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JTFstatus10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JTFcidadedestino10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JTFentregador10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JTFcidadeorigem10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(99, 99, 99)
                .addGroup(JPNfundo10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JTBatualizar10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JTBvoltar10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JTBexcluir10, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JBTeditar10, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JBTpesquisar10, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JPNfundo10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JPNfundo10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JTBvoltar10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTBvoltar10ActionPerformed
        // Fecha a janela atual
        Tela_Lista_Encomendas.this.dispose();
        // Abre a tela do menu principal
        Tela_Menu telaMenu = new Tela_Menu();
        telaMenu.setVisible(true);
    }//GEN-LAST:event_JTBvoltar10ActionPerformed

    private void JTBtabela10AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_JTBtabela10AncestorAdded
    String url = "jdbc:mysql://localhost:3306/crud";
    String usuario = "root";
    String senha = "";

    String sqlSelect = "SELECT * FROM encomendas";

    try (Connection con = DriverManager.getConnection(url, usuario, senha);
         Statement stmt = con.createStatement();
         ResultSet rs = stmt.executeQuery(sqlSelect)) {

        DefaultTableModel model = (DefaultTableModel) JTBtabela10.getModel();
        model.setRowCount(0); // Limpa a tabela

        while (rs.next()) {
            Object[] row = {
                rs.getInt("id"),
                rs.getString("entregador"),
                rs.getString("status"),
                // Adicione outros campos conforme necessário
            };
            model.addRow(row);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao carregar dados da tabela: " + e.getMessage());
    }
    }//GEN-LAST:event_JTBtabela10AncestorAdded

    private void JTBatualizar10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTBatualizar10ActionPerformed
        String url = "jdbc:mysql://localhost:3306/crud";
    String usuario = "root";
    String senha = "";

    String novoEntregador = JTFentregador10.getText();
    String novoStatus = JTFstatus10.getText();
    // Adicione outros campos conforme necessário

    String sqlInsert = "INSERT INTO encomendas (entregador, status) VALUES (?, ?)";

    try (Connection con = DriverManager.getConnection(url, usuario, senha);
         PreparedStatement pst = con.prepareStatement(sqlInsert)) {

        pst.setString(1, novoEntregador);
        pst.setString(2, novoStatus);

        int rowsInserted = pst.executeUpdate();
        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Novo registro inserido com sucesso!");
        } else {
            JOptionPane.showMessageDialog(this, "Falha ao inserir novo registro.");
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao inserir novo registro: " + e.getMessage());
    }

    }//GEN-LAST:event_JTBatualizar10ActionPerformed

    private void JTBexcluir10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTBexcluir10ActionPerformed
    // URL de conexão com o banco de dados
    String url = "jdbc:mysql://localhost:3306/crud";
    
    // Credenciais de acesso ao banco de dados
    String usuario = "root";
    String senha = "";
    
    // ID da encomenda a ser excluída
    int idEncomenda = Integer.parseInt(JTFnumero10.getText());
    
    // Consultas SQL para excluir registros das tabelas envolvidas
    String sqlDeleteEntregador = "DELETE FROM entregador WHERE id_entregador = ?";
    String sqlDeleteStatus = "DELETE FROM statuss WHERE id_statuss = ?";
    String sqlDeleteCalculoFrete = "DELETE FROM calculo_frete WHERE numero_pedido = ?";
    String sqlDeleteCliente = "DELETE FROM cliente WHERE id_cliente = ?";
    String sqlDeleteDestinatario = "DELETE FROM destinatario WHERE id_destinatario = ?";
    
    try (Connection con = DriverManager.getConnection(url, usuario, senha)) {
        // Desativar auto-commit para garantir que todas as exclusões sejam atômicas
        con.setAutoCommit(false);
        
        try (PreparedStatement pstDeleteEntregador = con.prepareStatement(sqlDeleteEntregador);
             PreparedStatement pstDeleteStatus = con.prepareStatement(sqlDeleteStatus);
             PreparedStatement pstDeleteCalculoFrete = con.prepareStatement(sqlDeleteCalculoFrete);
             PreparedStatement pstDeleteCliente = con.prepareStatement(sqlDeleteCliente);
             PreparedStatement pstDeletedestinatario = con.prepareStatement(sqlDeleteDestinatario)) {
            
            // Excluir da tabela Entregador
            pstDeleteEntregador.setInt(1, idEncomenda);
            int rowsDeletedEntregador = pstDeleteEntregador.executeUpdate();
            
            // Excluir da tabela Status
            pstDeleteStatus.setInt(1, idEncomenda);
            int rowsDeletedStatus = pstDeleteStatus.executeUpdate();
            
            // Excluir da tabela CalculoFrete
            pstDeleteCalculoFrete.setInt(1, idEncomenda);
            int rowsDeletedCalculoFrete = pstDeleteCalculoFrete.executeUpdate();
            
            // Excluir da tabela Destinatario
            pstDeleteCalculoFrete.setInt(1, idEncomenda);
            int rowsDeletedCliente = pstDeleteCliente.executeUpdate();
            
            // Excluir da tabela Cliente
            pstDeleteCalculoFrete.setInt(1, idEncomenda);
            int rowsDeletedDestinatario = pstDeletedestinatario.executeUpdate();
            
            // Verifica se algum registro foi excluído em pelo menos uma tabela
            if (rowsDeletedEntregador > 0 || rowsDeletedStatus > 0 || rowsDeletedCalculoFrete > 0 || rowsDeletedCliente > 0 || rowsDeletedDestinatario > 0) {
                con.commit(); // Confirma as exclusões
                JOptionPane.showMessageDialog(this, "Encomenda excluída com sucesso!");
            } else {
                con.rollback(); // Reverte a transação se nenhum registro foi excluído
                JOptionPane.showMessageDialog(this, "Nenhum registro encontrado para o ID informado.");
            }
            
        } catch (SQLException e) {
            con.rollback(); // Reverte a transação em caso de erro
            JOptionPane.showMessageDialog(this, "Erro ao excluir encomenda: " + e.getMessage());
        }
        
    } catch (SQLException e) {
        // Mostra uma mensagem de erro se ocorrer um problema ao acessar o banco de dados
        JOptionPane.showMessageDialog(this, "Erro ao conectar ao banco de dados: " + e.getMessage());
    }
    }//GEN-LAST:event_JTBexcluir10ActionPerformed

    private void JBTeditar10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBTeditar10ActionPerformed
         String url = "jdbc:mysql://localhost:3306/crud";
    String usuario = "root";
    String senha = "";

    int idEncomenda = Integer.parseInt(JTFnumero10.getText());
    String novoEntregador = JTFentregador10.getText();
    String novoStatus = JTFstatus10.getText();
    // Adicione outros campos conforme necessário

    String sqlUpdate = "UPDATE encomendas SET entregador = ?, status = ? WHERE id = ?";

    try (Connection con = DriverManager.getConnection(url, usuario, senha);
         PreparedStatement pst = con.prepareStatement(sqlUpdate)) {

        pst.setString(1, novoEntregador);
        pst.setString(2, novoStatus);
        pst.setInt(3, idEncomenda);

        int rowsUpdated = pst.executeUpdate();
        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(this, "Registro atualizado com sucesso!");
        } else {
            JOptionPane.showMessageDialog(this, "Nenhum registro encontrado para o ID informado.");
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao atualizar registro: " + e.getMessage());
    }

    }//GEN-LAST:event_JBTeditar10ActionPerformed

    private void JBTpesquisar10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBTpesquisar10ActionPerformed
    // Obtém o ID do cliente do campo de texto JTFnumeroPedido11 e converte para inteiro
    int idTabela = Integer.parseInt(JTFnumero10.getText());
    
    // Chama a função para pesquisar o cliente baseado no ID fornecido
    pesquisarTabela(idTabela);
    }//GEN-LAST:event_JBTpesquisar10ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tela_Lista_Encomendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tela_Lista_Encomendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tela_Lista_Encomendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tela_Lista_Encomendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tela_Lista_Encomendas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBTeditar10;
    private javax.swing.JButton JBTpesquisar10;
    private javax.swing.JLabel JLBcidadedestino10;
    private javax.swing.JLabel JLBcidadeorigem10;
    private javax.swing.JLabel JLBdata10;
    private javax.swing.JLabel JLBentregador10;
    private javax.swing.JLabel JLBlista10;
    private javax.swing.JLabel JLBmotoconnect10;
    private javax.swing.JLabel JLBnumero10;
    private javax.swing.JLabel JLBstatus10;
    private javax.swing.JLabel JLBtabelaencomenda10;
    private javax.swing.JPanel JPNfundo10;
    private javax.swing.JPanel JPNlista10;
    private javax.swing.JPanel JPNtabelaencomenda10;
    private javax.swing.JScrollPane JSPtabela10;
    private javax.swing.JButton JTBatualizar10;
    private javax.swing.JButton JTBexcluir10;
    private javax.swing.JTable JTBtabela10;
    private javax.swing.JButton JTBvoltar10;
    private javax.swing.JTextField JTFcidadedestino10;
    private javax.swing.JTextField JTFcidadeorigem10;
    private javax.swing.JTextField JTFdata10;
    private javax.swing.JTextField JTFentregador10;
    private javax.swing.JTextField JTFnumero10;
    private javax.swing.JTextField JTFstatus10;
    // End of variables declaration//GEN-END:variables
}
